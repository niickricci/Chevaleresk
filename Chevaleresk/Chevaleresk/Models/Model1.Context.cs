//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chevaleresk.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChevalereskEntities : DbContext
    {
        public ChevalereskEntities()
            : base("name=ChevalereskEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Arme> Arme { get; set; }
        public virtual DbSet<Armure> Armure { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Critique> Critique { get; set; }
        public virtual DbSet<elements> elements { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<Joueurs> Joueurs { get; set; }
        public virtual DbSet<Potion> Potion { get; set; }
        public virtual DbSet<potionConcocter> potionConcocter { get; set; }
        public virtual DbSet<Questions> Questions { get; set; }
        public virtual DbSet<Reponses> Reponses { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Inventaire> Inventaire { get; set; }
        public virtual DbSet<Magasin> Magasin { get; set; }
        public virtual DbSet<Panier> Panier { get; set; }
        public virtual DbSet<Recette> Recette { get; set; }
        public virtual DbSet<Statistiques> Statistiques { get; set; }
        public virtual DbSet<StatsQstScience> StatsQstScience { get; set; }
    
        public virtual int ajouterArme(string nom, Nullable<int> qtStock, Nullable<int> prix, byte[] photo, string efficacite, string genre, string description)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var qtStockParameter = qtStock.HasValue ?
                new ObjectParameter("qtStock", qtStock) :
                new ObjectParameter("qtStock", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var efficaciteParameter = efficacite != null ?
                new ObjectParameter("Efficacite", efficacite) :
                new ObjectParameter("Efficacite", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterArme", nomParameter, qtStockParameter, prixParameter, photoParameter, efficaciteParameter, genreParameter, descriptionParameter);
        }
    
        public virtual int ajouterArmure(string nom, Nullable<int> qtStock, Nullable<int> prix, byte[] photo, string matière, string taille)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var qtStockParameter = qtStock.HasValue ?
                new ObjectParameter("qtStock", qtStock) :
                new ObjectParameter("qtStock", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var matièreParameter = matière != null ?
                new ObjectParameter("Matière", matière) :
                new ObjectParameter("Matière", typeof(string));
    
            var tailleParameter = taille != null ?
                new ObjectParameter("Taille", taille) :
                new ObjectParameter("Taille", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterArmure", nomParameter, qtStockParameter, prixParameter, photoParameter, matièreParameter, tailleParameter);
        }
    
        public virtual int ajouterAuPanier(Nullable<int> idJoueur, Nullable<int> idItem, Nullable<int> qtItem)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var qtItemParameter = qtItem.HasValue ?
                new ObjectParameter("qtItem", qtItem) :
                new ObjectParameter("qtItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterAuPanier", idJoueurParameter, idItemParameter, qtItemParameter);
        }
    
        public virtual int ajouterElement(string nom, Nullable<int> qtStock, Nullable<int> prix, byte[] photo, string rareté, string dangerosité, string typeElement)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var qtStockParameter = qtStock.HasValue ?
                new ObjectParameter("qtStock", qtStock) :
                new ObjectParameter("qtStock", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var raretéParameter = rareté != null ?
                new ObjectParameter("Rareté", rareté) :
                new ObjectParameter("Rareté", typeof(string));
    
            var dangerositéParameter = dangerosité != null ?
                new ObjectParameter("Dangerosité", dangerosité) :
                new ObjectParameter("Dangerosité", typeof(string));
    
            var typeElementParameter = typeElement != null ?
                new ObjectParameter("TypeElement", typeElement) :
                new ObjectParameter("TypeElement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterElement", nomParameter, qtStockParameter, prixParameter, photoParameter, raretéParameter, dangerositéParameter, typeElementParameter);
        }
    
        public virtual int ajouterItemPanier(string nom, Nullable<int> qtStock, Nullable<int> prix, byte[] photo, string rareté, string dangerosité, string typeElement)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var qtStockParameter = qtStock.HasValue ?
                new ObjectParameter("qtStock", qtStock) :
                new ObjectParameter("qtStock", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var raretéParameter = rareté != null ?
                new ObjectParameter("Rareté", rareté) :
                new ObjectParameter("Rareté", typeof(string));
    
            var dangerositéParameter = dangerosité != null ?
                new ObjectParameter("Dangerosité", dangerosité) :
                new ObjectParameter("Dangerosité", typeof(string));
    
            var typeElementParameter = typeElement != null ?
                new ObjectParameter("TypeElement", typeElement) :
                new ObjectParameter("TypeElement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterItemPanier", nomParameter, qtStockParameter, prixParameter, photoParameter, raretéParameter, dangerositéParameter, typeElementParameter);
        }
    
        public virtual int ajouterJoueur(string alias, string nom, string prenom, string email, string motDePasse, byte[] avatar)
        {
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var motDePasseParameter = motDePasse != null ?
                new ObjectParameter("MotDePasse", motDePasse) :
                new ObjectParameter("MotDePasse", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterJoueur", aliasParameter, nomParameter, prenomParameter, emailParameter, motDePasseParameter, avatarParameter);
        }
    
        public virtual int ajouterPotion(string nom, Nullable<int> qtStock, Nullable<int> prix, byte[] photo, string effet, Nullable<int> duree)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var qtStockParameter = qtStock.HasValue ?
                new ObjectParameter("qtStock", qtStock) :
                new ObjectParameter("qtStock", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var effetParameter = effet != null ?
                new ObjectParameter("Effet", effet) :
                new ObjectParameter("Effet", typeof(string));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterPotion", nomParameter, qtStockParameter, prixParameter, photoParameter, effetParameter, dureeParameter);
        }
    
        public virtual ObjectResult<listeItem_Result> listeItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listeItem_Result>("listeItem");
        }
    
        public virtual int modifierMDP(string email, string ancienMDP, string nouveauMDP)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var ancienMDPParameter = ancienMDP != null ?
                new ObjectParameter("ancienMDP", ancienMDP) :
                new ObjectParameter("ancienMDP", typeof(string));
    
            var nouveauMDPParameter = nouveauMDP != null ?
                new ObjectParameter("nouveauMDP", nouveauMDP) :
                new ObjectParameter("nouveauMDP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modifierMDP", emailParameter, ancienMDPParameter, nouveauMDPParameter);
        }
    
        public virtual ObjectResult<rechercheItem_Result> rechercheItem(Nullable<int> valeur)
        {
            var valeurParameter = valeur.HasValue ?
                new ObjectParameter("valeur", valeur) :
                new ObjectParameter("valeur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rechercheItem_Result>("rechercheItem", valeurParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AcheterItem(Nullable<int> idItem, Nullable<int> idJoueur, Nullable<int> qtItem)
        {
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var qtItemParameter = qtItem.HasValue ?
                new ObjectParameter("qtItem", qtItem) :
                new ObjectParameter("qtItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcheterItem", idItemParameter, idJoueurParameter, qtItemParameter);
        }
    
        public virtual int AjouterItemInventaire(Nullable<int> idItem, Nullable<int> idJoueur, Nullable<int> qtItem)
        {
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var qtItemParameter = qtItem.HasValue ?
                new ObjectParameter("qtItem", qtItem) :
                new ObjectParameter("qtItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterItemInventaire", idItemParameter, idJoueurParameter, qtItemParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> incrementerQuantitePanier(Nullable<int> idJoueur, Nullable<int> idItem, Nullable<int> qtIncrement)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var qtIncrementParameter = qtIncrement.HasValue ?
                new ObjectParameter("qtIncrement", qtIncrement) :
                new ObjectParameter("qtIncrement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("incrementerQuantitePanier", idJoueurParameter, idItemParameter, qtIncrementParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> decrementQuantitePanier(Nullable<int> idJoueur, Nullable<int> idItem, Nullable<int> qtIncrement)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var qtIncrementParameter = qtIncrement.HasValue ?
                new ObjectParameter("qtIncrement", qtIncrement) :
                new ObjectParameter("qtIncrement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("decrementQuantitePanier", idJoueurParameter, idItemParameter, qtIncrementParameter);
        }
    
        public virtual int RetirerDuPanier(Nullable<int> idJoueur, Nullable<int> idItem)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetirerDuPanier", idJoueurParameter, idItemParameter);
        }
    
        public virtual int AcheterItemsDansPanier(Nullable<int> idJoueur)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcheterItemsDansPanier", idJoueurParameter);
        }
    
        public virtual int ConcocterPotion(Nullable<int> idJoueur, Nullable<int> idPotion)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var idPotionParameter = idPotion.HasValue ?
                new ObjectParameter("idPotion", idPotion) :
                new ObjectParameter("idPotion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConcocterPotion", idJoueurParameter, idPotionParameter);
        }
    
        public virtual ObjectResult<questionRandom_Result> questionRandom()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<questionRandom_Result>("questionRandom");
        }
    
        public virtual int vérifierReponse(Nullable<int> idReponse, Nullable<int> idJoueur, ObjectParameter estCorrect)
        {
            var idReponseParameter = idReponse.HasValue ?
                new ObjectParameter("idReponse", idReponse) :
                new ObjectParameter("idReponse", typeof(int));
    
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("vérifierReponse", idReponseParameter, idJoueurParameter, estCorrect);
        }
    
        public virtual int MonterAlchimiste(Nullable<int> idJoueur)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MonterAlchimiste", idJoueurParameter);
        }
    
        public virtual int laisserUnCommentaire(Nullable<int> idItem, Nullable<int> idJoueur, Nullable<int> nombreEtoile, string commentaire)
        {
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("idItem", idItem) :
                new ObjectParameter("idItem", typeof(int));
    
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var nombreEtoileParameter = nombreEtoile.HasValue ?
                new ObjectParameter("nombreEtoile", nombreEtoile) :
                new ObjectParameter("nombreEtoile", typeof(int));
    
            var commentaireParameter = commentaire != null ?
                new ObjectParameter("commentaire", commentaire) :
                new ObjectParameter("commentaire", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("laisserUnCommentaire", idItemParameter, idJoueurParameter, nombreEtoileParameter, commentaireParameter);
        }
    
        public virtual int retirerCommentaire(Nullable<int> idCommentaire)
        {
            var idCommentaireParameter = idCommentaire.HasValue ?
                new ObjectParameter("idCommentaire", idCommentaire) :
                new ObjectParameter("idCommentaire", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("retirerCommentaire", idCommentaireParameter);
        }
    
        public virtual int modifierProfile(Nullable<int> idJoueur, string alias, string nom, string prenom, string mdp)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("alias", alias) :
                new ObjectParameter("alias", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("prenom", prenom) :
                new ObjectParameter("prenom", typeof(string));
    
            var mdpParameter = mdp != null ?
                new ObjectParameter("mdp", mdp) :
                new ObjectParameter("mdp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modifierProfile", idJoueurParameter, aliasParameter, nomParameter, prenomParameter, mdpParameter);
        }
    
        public virtual int ajouterStatsEnigma(Nullable<int> idJoueur, Nullable<bool> estReussi)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var estReussiParameter = estReussi.HasValue ?
                new ObjectParameter("estReussi", estReussi) :
                new ObjectParameter("estReussi", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterStatsEnigma", idJoueurParameter, estReussiParameter);
        }
    
        public virtual int augmenterStatsEnigma(Nullable<int> idJoueur, Nullable<bool> estReussi)
        {
            var idJoueurParameter = idJoueur.HasValue ?
                new ObjectParameter("idJoueur", idJoueur) :
                new ObjectParameter("idJoueur", typeof(int));
    
            var estReussiParameter = estReussi.HasValue ?
                new ObjectParameter("estReussi", estReussi) :
                new ObjectParameter("estReussi", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("augmenterStatsEnigma", idJoueurParameter, estReussiParameter);
        }
    }
}
